// <auto-generated />
using System;
using Collect.io.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Collect.io.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230718150042_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Collect.io.DAL.Models.CollectionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Topic")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description of the collection",
                            Title = "Books",
                            Topic = 6,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Collect.io.DAL.Models.FieldConfModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<string>("FieldType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("FieldTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CollectionId = 1,
                            FieldType = "int",
                            Name = "Year"
                        });
                });

            modelBuilder.Entity("Collect.io.DAL.Models.FieldValuesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique()
                        .HasFilter("[ItemId] IS NOT NULL");

                    b.HasIndex("TypeId")
                        .IsUnique()
                        .HasFilter("[TypeId] IS NOT NULL");

                    b.ToTable("FieldValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1,
                            TypeId = 1,
                            Value = "1813"
                        });
                });

            modelBuilder.Entity("Collect.io.DAL.Models.ItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CollectionId = 1,
                            Date = new DateTime(2023, 7, 18, 20, 0, 42, 371, DateTimeKind.Local).AddTicks(6672),
                            Name = "Pride and Prejudice",
                            Tags = "classics,romance,drama"
                        });
                });

            modelBuilder.Entity("Collect.io.DAL.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "m.temurova@yahoo.com",
                            Password = "Password",
                            Salt = "",
                            UserName = "Melpally"
                        });
                });

            modelBuilder.Entity("Collect.io.DAL.Models.CollectionModel", b =>
                {
                    b.HasOne("Collect.io.DAL.Models.UserModel", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Collect.io.DAL.Models.FieldConfModel", b =>
                {
                    b.HasOne("Collect.io.DAL.Models.CollectionModel", "Collection")
                        .WithMany("Fields")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Collect.io.DAL.Models.FieldValuesModel", b =>
                {
                    b.HasOne("Collect.io.DAL.Models.ItemModel", "Item")
                        .WithOne("FieldValue")
                        .HasForeignKey("Collect.io.DAL.Models.FieldValuesModel", "ItemId");

                    b.HasOne("Collect.io.DAL.Models.FieldConfModel", "Type")
                        .WithOne("ValueId")
                        .HasForeignKey("Collect.io.DAL.Models.FieldValuesModel", "TypeId");

                    b.Navigation("Item");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Collect.io.DAL.Models.ItemModel", b =>
                {
                    b.HasOne("Collect.io.DAL.Models.CollectionModel", "Collection")
                        .WithMany("Items")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("Collect.io.DAL.Models.CollectionModel", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Collect.io.DAL.Models.FieldConfModel", b =>
                {
                    b.Navigation("ValueId");
                });

            modelBuilder.Entity("Collect.io.DAL.Models.ItemModel", b =>
                {
                    b.Navigation("FieldValue");
                });

            modelBuilder.Entity("Collect.io.DAL.Models.UserModel", b =>
                {
                    b.Navigation("Collections");
                });
#pragma warning restore 612, 618
        }
    }
}
